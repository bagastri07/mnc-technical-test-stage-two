// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/model/contract/user_balance.contract.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	context "context"
	reflect "reflect"

	entity "github.com/bagastri07/mnc-technical-test-stage-two/internal/model/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserBalanceRepository is a mock of UserBalanceRepository interface.
type MockUserBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserBalanceRepositoryMockRecorder
}

// MockUserBalanceRepositoryMockRecorder is the mock recorder for MockUserBalanceRepository.
type MockUserBalanceRepositoryMockRecorder struct {
	mock *MockUserBalanceRepository
}

// NewMockUserBalanceRepository creates a new mock instance.
func NewMockUserBalanceRepository(ctrl *gomock.Controller) *MockUserBalanceRepository {
	mock := &MockUserBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockUserBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBalanceRepository) EXPECT() *MockUserBalanceRepositoryMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockUserBalanceRepository) FindByUserID(ctx context.Context, userID uuid.UUID) (*entity.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].(*entity.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockUserBalanceRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockUserBalanceRepository)(nil).FindByUserID), ctx, userID)
}

// Upsert mocks base method.
func (m *MockUserBalanceRepository) Upsert(ctx context.Context, userBalance *entity.UserBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, userBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUserBalanceRepositoryMockRecorder) Upsert(ctx, userBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserBalanceRepository)(nil).Upsert), ctx, userBalance)
}
